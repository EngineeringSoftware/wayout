KOKKOS_DEVICES = "Cuda, OpenMP"
# TARGET = "kernel.cpython-38-x86_64-linux-gnu.so"

SRC = $(wildcard *.cpp)

default: build

CXX = $(PK_KOKKOS_NVCC)
KOKKOS_ARCH = "Kepler61"
KOKKOS_CUDA_OPTIONS = "enable_lambda"

PY_CFLAGS = $(shell python3-config --cflags)
PY_CFLAGS := $(filter-out -flto, $(PY_CFLAGS))
INCLUDES = -I${HOME}/pybind11/include -I$(PK_KOKKOS_KERNELS_INCLUDE_PATH_CUDA) -I${HOME}/Kokkos/kokkos-kernels/test_common/ ${PY_CFLAGS} 
CXXFLAGS = -O3 -std=c++14 -fPIC `python3 -m pybind11 --includes` --expt-extended-lambda
LINK = ${CXX}
DEPFLAGS = -M

OBJ = $(SRC:.cpp=.o)
LIB = 

build: $(TARGET)

$(TARGET): $(TARGET:.so=.o)
	$(LINK) -shared $(INCLUDES) $< -L$(PK_KOKKOS_LIB_PATH_CUDA) -L$(PK_KOKKOS_KERNELS_LIB_PATH_CUDA) -lkokkoskernels -o $(TARGET) $(PK_KOKKOS_LIB_PATH_CUDA)/libkokkoscontainers.so $(PK_KOKKOS_LIB_PATH_CUDA)/libkokkoscore.so

%.o:%.cpp
	$(CXX) $(INCLUDES) -fopenmp -isystem $(PK_KOKKOS_INCLUDE_PATH_CUDA) $(CXXFLAGS) -c $<

run: $(TARGET)
	./$(TARGET)

clean:
	rm -f f_*.cpp
	rm -f f_*.o
	rm -f f_*.so
